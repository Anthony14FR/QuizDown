{# templates/quiz/new.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Nouveau Quiz{% endblock %}

{% block body %}
    <div class="container mx-auto p-4 max-w-4xl">
        <h1 class="text-xl font-bold mb-4">Créer un nouveau Quiz</h1>

        {{ form_start(form) }}
            <div class="card bg-base-100 shadow p-6 mb-6">
                <div class="row">
                    <div class="col-md-6">
                        {{ form_row(form.title, {
                            'attr': {'class': 'input input-bordered w-full'}
                        }) }}
                    </div>
                    <div class="col-md-3">
                        {{ form_row(form.type, {
                            'attr': {'class': 'select select-bordered w-full'}
                        }) }}
                    </div>
                    <div id="penalty-fields" style="display: none;">
                        <div class="col-md-6">
                            {{ form_row(form.penaltyPoints, {
                                'attr': {'class': 'input input-bordered w-full'}
                            }) }}
                        </div>
                    </div>
                    <div id="timed-fields" style="display: none;">
                        <div class="col-md-12">
                            {{ form_row(form.timeLimit, {
                                'attr': {'class': 'input input-bordered w-full'}
                            }) }}
                        </div>
                    </div>
                    <div class="mb-4">
                        {{ form_row(form.categories, {
                            'attr': {'class': 'select select-bordered w-full min-h-16', 'multiple': 'multiple', 'size': '5'}
                        }) }}
                    </div>
                    <div class="mb-4">
                        {{ form_row(form.tags, {
                            'attr': {'class': 'select select-bordered w-full min-h-16', 'multiple': 'multiple', 'size': '5'}
                        }) }}
                    </div>
                    <div class="col-md-3">
                        {{ form_row(form.defaultScore, {
                            'attr': {'class': 'input input-bordered w-full'}
                        }) }}
                    </div>
                </div>

                {{ form_row(form.description, {
                    'attr': {'class': 'textarea textarea-bordered w-full'}
                }) }}
            </div>

            <div class="questions-wrapper mt-4">
                <h3 class="text-xl font-bold mb-4">Questions</h3>
                <div class="questions-collection"
                     data-index="{{ form.questions|length > 0 ? form.questions|length : 0 }}">
                </div>

                <button type="button" class="btn btn-primary mt-4 add-question">
                    <i class="fas fa-plus"></i> Ajouter une question
                </button>
            </div>

            <button type="submit" class="btn btn-success mt-6">Créer le quiz</button>
        {{ form_end(form) }}

        <template id="question-template">
            <div class="question-item card bg-base-200 p-6 mb-4">
                <div class="row">
                    <div class="col-md-9">
                        <div class="form-group">
                            <input type="text"
                                   name="quiz[questions][__name__][content]"
                                   required="required"
                                   class="input input-bordered w-full mb-4"
                                   placeholder="Votre question">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select name="quiz[questions][__name__][type]"
                                class="select select-bordered w-full mb-4"
                                required="required">
                            <option value="true_false">Vrai / Faux</option>
                            <option value="single_choice">Choix unique</option>
                            <option value="multiple_choice">Choix multiple</option>
                        </select>
                    </div>
                </div>

                <div class="answers-collection mt-3" data-index="0">
                    <h5 class="font-bold mb-2">Réponses</h5>
                </div>

                <button type="button" class="btn btn-sm btn-secondary mt-2 add-answer">
                    <i class="fas fa-plus"></i> Ajouter une réponse
                </button>
                <button type="button" class="btn btn-error btn-sm mt-4 remove-question">
                    <i class="fas fa-trash"></i> Supprimer la question
                </button>
            </div>
        </template>

       <template id="answer-template">
            <div class="answer-item bg-base-100 p-3 rounded-lg mb-2">
                <input type="text" name="quiz[questions][__question_name__][answers][__name__][content]"
                    required class="input input-bordered w-full mb-2" placeholder="Votre réponse">
                <div class="flex items-center gap-2">
                    <input type="radio"
                        id="quiz_questions___question_name___answers___name___isCorrect"
                        name="quiz[questions][__question_name__][answers][__name__][isCorrect]"
                        class="checkbox"
                        value="1">
                    <label class="cursor-pointer" for="quiz_questions___question_name___answers___name___isCorrect">
                        Bonne réponse
                    </label>
                </div>
                <button type="button" class="btn btn-error btn-sm mt-2 remove-answer">Supprimer</button>
            </div>
        </template>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const questionsCollection = document.querySelector('.questions-collection');
            const questionTemplate = document.querySelector('#question-template');
            const answerTemplate = document.querySelector('#answer-template');

            const typeSelect = document.querySelector('select[name="quiz[type]"]');
            const timedFields = document.getElementById('timed-fields');
            const penaltyFields = document.getElementById('penalty-fields');

            function updateFields() {
                const quizType = typeSelect.value;

                if (quizType === 'timed') {
                    timedFields.style.display = 'block';
                    penaltyFields.style.display = 'none';
                } else if (quizType === 'penalty') {
                    timedFields.style.display = 'block';
                    penaltyFields.style.display = 'block';
                } else {
                    timedFields.style.display = 'none';
                    penaltyFields.style.display = 'none';
                }
            }

            typeSelect.addEventListener('change', updateFields);
            updateFields();

            document.querySelector('.add-question').addEventListener('click', function() {
                const questionIndex = parseInt(questionsCollection.dataset.index);

                const newQuestion = questionTemplate.content.cloneNode(true);

                newQuestion.querySelectorAll('[name*="__name__"]').forEach(input => {
                    input.name = input.name.replace('__name__', questionIndex);
                });

                const questionBlock = newQuestion.querySelector('.question-item');

                questionBlock.querySelector('.add-answer').addEventListener('click', function() {
                    addAnswer(questionBlock.querySelector('.answers-collection'), questionIndex);
                });

                questionBlock.querySelector('.remove-question').addEventListener('click', function() {
                    questionBlock.remove();
                });

                questionsCollection.appendChild(newQuestion);
                questionsCollection.dataset.index = questionIndex + 1;

                addAnswer(questionBlock.querySelector('.answers-collection'), questionIndex);
                addAnswer(questionBlock.querySelector('.answers-collection'), questionIndex);
            });

            function addAnswer(answersCollection, questionIndex) {
                const answerIndex = parseInt(answersCollection.dataset.index);

                const newAnswer = answerTemplate.content.cloneNode(true);

                newAnswer.querySelectorAll('[name*="__question_name__"]').forEach(input => {
                    input.name = input.name
                        .replace('__question_name__', questionIndex)
                        .replace('__name__', answerIndex);
                });

                const answerBlock = newAnswer.querySelector('.answer-item');
                answerBlock.querySelector('.remove-answer').addEventListener('click', function() {
                    answerBlock.remove();
                });

                const newRadio = answerBlock.querySelector('input[type="radio"]');
                newRadio.wasChecked = false;
                newRadio.addEventListener('click', function() {
                    if (this.checked && this.wasChecked) {
                        this.checked = false;
                    }
                    this.wasChecked = this.checked;
                });

                const questionTypeSelect = answersCollection.closest('.question-item').querySelector('select[name*="[type]"]');
                if (questionTypeSelect && questionTypeSelect.value === 'true_false') {
                    answerBlock.querySelector('input[type="text"]').value = answerIndex === 0 ? 'Vrai' : 'Faux';
                    if (answerIndex === 0) {
                        newRadio.checked = true;
                    }
                }

                answersCollection.appendChild(newAnswer);
                answersCollection.dataset.index = answerIndex + 1;
            }

            document.addEventListener('click', function(e) {
                if (e.target.closest('.remove-answer')) {
                    e.target.closest('.answer-block').remove();
                }
                if (e.target.closest('.remove-question')) {
                    e.target.closest('.question-block').remove();
                }
            });
        });
    </script>
{% endblock %}
